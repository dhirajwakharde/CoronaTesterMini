/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package corona;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author DHANASHREE
 */
public class Intro extends javax.swing.JFrame {

    /**
     * Creates new form Intro
     */
    public Intro() {
        initComponents();
        show_user();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MyDatabasePUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("MyDatabasePU").createEntityManager();
        registrationQuery = java.beans.Beans.isDesignTime() ? null : MyDatabasePUEntityManager.createQuery("SELECT r FROM Registration r");
        registrationList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : registrationQuery.getResultList();
        detailsQuery = java.beans.Beans.isDesignTime() ? null : MyDatabasePUEntityManager.createQuery("SELECT d FROM Details d");
        detailsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : detailsQuery.getResultList();
        detailsQuery1 = java.beans.Beans.isDesignTime() ? null : MyDatabasePUEntityManager.createQuery("SELECT d FROM Details d");
        detailsList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : detailsQuery1.getResultList();
        registrationQuery1 = java.beans.Beans.isDesignTime() ? null : MyDatabasePUEntityManager.createQuery("SELECT r FROM Registration r");
        registrationList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : registrationQuery1.getResultList();
        analyseQuery = java.beans.Beans.isDesignTime() ? null : MyDatabasePUEntityManager.createQuery("SELECT a FROM Analyse a");
        analyseList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : analyseQuery.getResultList();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "mobile", "age", "gender", "profession", "foreign travel", "symptoms", "disease", "past 14 days travel", "interaction", "results"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1770, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public ArrayList<User>userList()
    {ArrayList<User>usersList=new ArrayList<>();
        try {
            
            Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/MyDatabase","dhanashree","dhanu");
           // String sql="select * from REGISTRATion,DETAILS,Analyse,Test";
String sql="select NAME,MOB_NO,age,gender,profession,travel_history,symptoms,disease,international_travel,interaction,test_result from REGISTRATION r,DETAILS d, ANALYSE a,TEST t where r.username=d.username and d.username=a.username and a.username=t.username";
            Statement stmt=con.createStatement();
            ResultSet rs=stmt.executeQuery(sql);
            User user;
            while(rs.next())
            {
                user=new User(rs.getString("name"),rs.getLong("mob_no"),rs.getInt("age"),rs.getString("gender"),rs.getString("profession"),rs.getString("travel_history"),rs.getString("symptoms"),rs.getString("disease"),rs.getString("international_travel"),rs.getString("interaction"),rs.getString("test_result"));
                //user=new User(rs.getString("name"),rs.getLong("mob_no"),rs.getInt("age"),rs.getString("test_result"));
                usersList.add(user);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Intro.class.getName()).log(Level.SEVERE, null, ex);
        }
        return usersList;
    }
    public void show_user()
    {
        ArrayList<User> list=userList();
        DefaultTableModel model=(DefaultTableModel) jTable2.getModel();
        
        Object[]row=new Object[11];
      jTable2.getColumnModel().getColumn(10).setPreferredWidth(1000);
      jTable2.getColumnModel().getColumn(2).setPreferredWidth(50);
      jTable2.getColumnModel().getColumn(3).setPreferredWidth(90);
      jTable2.getColumnModel().getColumn(1).setPreferredWidth(200);
      jTable2.getColumnModel().getColumn(8).setPreferredWidth(200);
      jTable2.getColumnModel().getColumn(4).setPreferredWidth(280);
      jTable2.getColumnModel().getColumn(5).setPreferredWidth(150);
      jTable2.getColumnModel().getColumn(6).setPreferredWidth(250);
      jTable2.getColumnModel().getColumn(7).setPreferredWidth(250);
      jTable2.getColumnModel().getColumn(0).setPreferredWidth(300);
      jTable2.getColumnModel().getColumn(9).setPreferredWidth(800);
        System.out.println(list.size());
        for(int i=0;i<list.size();i++)
        {
            row[0]=list.get(i).getname();
            row[1]=list.get(i).getmob_no();
            row[2]=list.get(i).getage();
            row[3]=list.get(i).getgender();
            row[4]=list.get(i).getprofession();
            row[5]=list.get(i).gettravel_history();
             row[6]=list.get(i).getsymptoms();
              row[7]=list.get(i).getdisease();
               row[8]=list.get(i).getinternationaltravel();
                row[9]=list.get(i).getinteraction();
                 row[10]=list.get(i).gettestresult();
            model.addRow(row);
        }
        
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Intro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Intro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager MyDatabasePUEntityManager;
    private java.util.List<corona.Analyse> analyseList;
    private javax.persistence.Query analyseQuery;
    private java.util.List<corona.Details> detailsList;
    private java.util.List<corona.Details> detailsList1;
    private javax.persistence.Query detailsQuery;
    private javax.persistence.Query detailsQuery1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private java.util.List<corona.Registration> registrationList;
    private java.util.List<corona.Registration> registrationList1;
    private javax.persistence.Query registrationQuery;
    private javax.persistence.Query registrationQuery1;
    // End of variables declaration//GEN-END:variables
}
